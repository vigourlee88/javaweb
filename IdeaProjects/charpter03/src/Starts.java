public class Starts {
    public static void main(String[] args) {
        //使用for 循环完成下面的案例
        //请编写一个程序，可以接收一个整数，表示是层数(totalLevel)打印出金字塔
        /*
                 *
               *  *
              *    *
             ********
           思路分析
           化繁为简
           1.先打印一个矩形
               *****
               *****
               *****
               *****
               *****
           2.打印半个金字塔
               *         第1层 有 1个*
               **        第2层 有 2个*
               ***       第3层 有 3个*
               ****      第4层 有 4个*
               *****     第5层 有 5个*

           3.打印整个金字塔
               *           第1层 有 1个*   2 * 层数 - 1   有4=(总层数-1)个空格
              ***          第2层 有 3个*   2 * 层数 - 1   有3=(总层数-2)个空格
             *****         第3层 有 5个*   2 * 层数 - 1   有2=(总层数-3)个空格
            *******        第4层 有 7个*   2 * 层数 - 1   有1=(总层数-4)个空格
           *********       第5层 有 9个*   2 * 层数 - 1   有0=(总层数-5)个空格

         3.打印镂空金字塔
               *           第1层 有 1个*  当前行的第一个位置*，最后一个位置*
              * *          第2层 有 2个*  当前行的第一个位置*，最后一个位置*
             *   *         第3层 有 2个*  当前行的第一个位置*，最后一个位置*
            *     *        第4层 有 2个*  当前行的第一个位置*，最后一个位置*
           *********       第5层 有 9个*  全部输出*
           先死后活
           * 5层数做成变量 int totalLevel
         */
        int totalLevel = 5;//表总层数
        for(int i = 1;i <= totalLevel;i++){//i表示层数
            //在输出*之前，还要输出  对应空格=总层数-当前层
            for(int k = 1;k <= totalLevel - i;k++){
                System.out.print(" ");
            }
            //控制打印每层的*个数
            for(int j = 1;j <= 2*i-1;j++){
                //当前的第一个位置是*,最后一个位置也是*，最后一层全部*
                if(j == 1 || j == 2 * i - 1 || i == totalLevel){
                    System.out.print("*");
                }else{//其他情况输出空格
                    System.out.print(" ");
                }
            }
            //每打印完一层的*后，就换行 println本身就会换行
            System.out.println("\n");

        }
    }
}
