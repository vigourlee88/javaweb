public class BitOperator {
    public static void main(String[] args) {

        //1.先得到2的补码 =>
        //   2的原码00000000 00000000 00000000 00000010
        //   2的补码00000000 00000000 00000000 00000010
        // 2.3的原码00000000 00000000 00000000 00000011
        //   3的补码00000000 00000000 00000000 00000011
        //3.按位与&   全为1，才为1，否则为0
        //运行用补码
        //   00000000 00000000 00000000 00000010
        //   00000000 00000000 00000000 00000011
        // 运算后的补码
        //   00000000 00000000 00000000 00000010
        //运算后的原码(首位为符号位 0为整数 原码补码三码合一)
        //   00000000 00000000 00000000 00000010
        //2进制=>10进制
        //为 2
        System.out.println(2&3);//2

        //推导
        //1.先得到-2的原码 10000000 00000000 00000000 00000010
        //负数的反码，符号位不变，其他位取反
        //2.  -2的反码 11111111 11111111 11111111 11111101
        //负数的补码 =反码+1
        //3.  -2的补码 11111111 11111111 11111111 11111110
        //4.按位取反~ 0=>1  1=>0
        //运行后结果 (补码)最左边符号位0是正数
        // 00000000 00000000 00000000 00000001
        //结果原码00000000 00000000 00000000 00000001
        //1
        System.out.println(~-2);//1

        //推导
        //1.先得到2的原码 00000000 00000000 00000000 00000010
        //2.  2的反码 00000000 00000000 00000000 00000010
        //正数的补码 反码 原码 三码合一
        //3.  2的补码 00000000 00000000 00000000 00000010
        //4.按位取反~ 0=>1  1=>0
        //运行后结果 (补码)最左边符号位1是负数
        //       11111111 1111111 11111111 11111101
        //负数的反码=补码-1 最右边-1即可
        //负数的反码    111111111 11111111 111111111 11111100
        //负数的反码 = 原码的符号位不变，其他位取反(0=>1 1>0)
        //运算后的原码  10000000 00000000 00000000 00000011
        //-3
        System.out.println(~2);//-3
    }
}
